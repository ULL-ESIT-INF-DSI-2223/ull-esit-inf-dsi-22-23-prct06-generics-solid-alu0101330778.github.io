"use strict";//Lista
function cov_2pycng18ow(){var path="/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts";var hash="5c004a464fc1c5dca0afaab4717e416628501d37";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:62}},"1":{start:{line:4,column:0},end:{line:4,column:23}},"2":{start:{line:19,column:12},end:{line:19,column:14}},"3":{start:{line:21,column:8},end:{line:21,column:27}},"4":{start:{line:25,column:8},end:{line:25,column:45}},"5":{start:{line:28,column:8},end:{line:28,column:33}},"6":{start:{line:31,column:8},end:{line:33,column:9}},"7":{start:{line:31,column:21},end:{line:31,column:22}},"8":{start:{line:32,column:12},end:{line:32,column:37}},"9":{start:{line:34,column:8},end:{line:34,column:20}},"10":{start:{line:38,column:8},end:{line:40,column:9}},"11":{start:{line:38,column:21},end:{line:38,column:22}},"12":{start:{line:39,column:12},end:{line:39,column:35}},"13":{start:{line:41,column:8},end:{line:41,column:20}},"14":{start:{line:44,column:30},end:{line:44,column:32}},"15":{start:{line:45,column:28},end:{line:45,column:52}},"16":{start:{line:46,column:8},end:{line:50,column:9}},"17":{start:{line:46,column:21},end:{line:46,column:22}},"18":{start:{line:47,column:12},end:{line:49,column:13}},"19":{start:{line:48,column:16},end:{line:48,column:47}},"20":{start:{line:51,column:8},end:{line:51,column:27}},"21":{start:{line:54,column:19},end:{line:54,column:23}},"22":{start:{line:55,column:23},end:{line:55,column:24}},"23":{start:{line:56,column:8},end:{line:63,column:9}},"24":{start:{line:57,column:12},end:{line:62,column:13}},"25":{start:{line:58,column:16},end:{line:58,column:27}},"26":{start:{line:61,column:16},end:{line:61,column:29}},"27":{start:{line:64,column:8},end:{line:64,column:24}},"28":{start:{line:67,column:25},end:{line:67,column:27}},"29":{start:{line:68,column:28},end:{line:68,column:47}},"30":{start:{line:69,column:8},end:{line:71,column:9}},"31":{start:{line:69,column:21},end:{line:69,column:22}},"32":{start:{line:70,column:12},end:{line:70,column:52}},"33":{start:{line:72,column:8},end:{line:72,column:27}},"34":{start:{line:75,column:8},end:{line:77,column:9}},"35":{start:{line:75,column:21},end:{line:75,column:22}},"36":{start:{line:76,column:12},end:{line:76,column:60}},"37":{start:{line:78,column:8},end:{line:78,column:26}},"38":{start:{line:81,column:29},end:{line:81,column:31}},"39":{start:{line:82,column:28},end:{line:82,column:51}},"40":{start:{line:83,column:8},end:{line:85,column:9}},"41":{start:{line:83,column:21},end:{line:83,column:38}},"42":{start:{line:84,column:12},end:{line:84,column:43}},"43":{start:{line:86,column:8},end:{line:86,column:27}},"44":{start:{line:89,column:8},end:{line:91,column:9}},"45":{start:{line:89,column:21},end:{line:89,column:22}},"46":{start:{line:90,column:12},end:{line:90,column:35}},"47":{start:{line:94,column:0},end:{line:94,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:23},end:{line:22,column:5}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:18},end:{line:26,column:5}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:22},end:{line:29,column:5}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:18},end:{line:35,column:5}},line:30},"4":{name:"(anonymous_4)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:24},end:{line:42,column:5}},line:37},"5":{name:"(anonymous_5)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:22},end:{line:52,column:5}},line:43},"6":{name:"(anonymous_6)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:13},end:{line:65,column:5}},line:53},"7":{name:"(anonymous_7)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:17},end:{line:73,column:5}},line:66},"8":{name:"(anonymous_8)",decl:{start:{line:74,column:4},end:{line:74,column:5}},loc:{start:{line:74,column:32},end:{line:79,column:5}},line:74},"9":{name:"(anonymous_9)",decl:{start:{line:80,column:4},end:{line:80,column:5}},loc:{start:{line:80,column:14},end:{line:87,column:5}},line:80},"10":{name:"(anonymous_10)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:21},end:{line:92,column:5}},line:88}},branchMap:{"0":{loc:{start:{line:47,column:12},end:{line:49,column:13}},type:"if",locations:[{start:{line:47,column:12},end:{line:49,column:13}},{start:{line:47,column:12},end:{line:49,column:13}}],line:47},"1":{loc:{start:{line:57,column:12},end:{line:62,column:13}},type:"if",locations:[{start:{line:57,column:12},end:{line:62,column:13}},{start:{line:57,column:12},end:{line:62,column:13}}],line:57}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts",sources:["/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts"],names:[],mappings:"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",sourcesContent:["//Lista\n\n/*En este ejercicio tendr\xE1 que implementar una clase gen\xE9rica que modele una lista de elementos de cualquier tipo y sus operaciones sin hacer uso de ninguna de las funcionlidades proporcionadas por Array.prototype. Se permite, sin embargo, el uso de []*/\n/*\nDeber\xE1 incluir, al menos, las siguientes operaciones para trabajar con su lista:\n\nM\xE9todo append, el cual, dadas dos listas, permite a\xF1adir al final de la primera los elementos de la segunda.\nM\xE9todo concatenate, que dado un n\xFAmero variable de listas, combina todos sus elementos en una \xFAnica lista que retorna.\nM\xE9todo filter, que dada una lista y un predicado l\xF3gico retorna una lista con todos los elementos de la lista inicial para los cuales el predicado l\xF3gico es verdadero.\nM\xE9todo length, que devuelve el n\xFAmero de elementos de la lista.\nM\xE9todo map, que dada una lista y una funci\xF3n, retorna la lista resultante de aplicar a cada elemento de la lista inicial la funci\xF3n.\nM\xE9todo reduce, que dada una lista, una funci\xF3n y un acumulador inicial, reduce cada elemento al acumulador utilizando la funci\xF3n.\nM\xE9todo reverse, el cual dada una lista, retorna una lista con los elementos originales pero en orden inverso.\nM\xE9todo forEach, que dada una lista y una funci\xF3n, permite iterar en los elementos de la lista e invocar la funci\xF3n con cada uno de ellos.\n*/\nexport class Lista<T> {\n    private lista: T[] = [];\n    \n    constructor(lista: T[]) {\n        this.lista = lista;\n    }\n    //No usar .push\n    public add(elemento: T): void {\n        this.lista[this.length()] = elemento;\n    }\n\n    public getbyindex(index: number): T {\n        return this.lista[index];\n    }\n\n    public append(lista: Lista<T>): Lista<T> {\n        for (let i = 0; i < lista.length(); i++) {\n            this.add(lista.lista[i]);\n        }\n        return this;\n    }\n    //combina todos sus elementos en una \xFAnica lista que retorna\n    public concatenate(listas: Lista<T>[]): Lista<T> {\n        for (let i = 0; i < listas.length; i++) {\n            this.append(listas[i]);\n        }\n        return this;\n    }\n    \n    public filter(predicado: (elemento: T) => boolean): Lista<T> {\n        const listaFiltrada: T[] = [];\n       const listaresult =  new Lista(listaFiltrada);\n        for (let i = 0; i < this.length(); i++) {\n            if (predicado(this.lista[i])) {\n                listaresult.add(this.lista[i]);\n            }\n        }\n        return listaresult;\n    }\n    \n    public length(): number {\n       let flag = true;\n       let contador = 0;\n        while (flag) {\n            if (this.lista[contador] != null) {\n                contador++;\n            } else {\n                flag = false;\n            }\n        }\n        return contador;\n    }\n    \n    public map(funcion: (elemento: T) => T): Lista<T> {\n        const listaMap: T[] = [];\n        const listaresult =  new Lista(listaMap);\n        for (let i = 0; i < this.length(); i++) {\n            listaresult.add(funcion(this.lista[i]));\n        }\n        return listaresult;\n    }\n    \n    public reduce(funcion: (acumulador: T, elemento: T) => T, acumulador: T): T {\n        for (let i = 0; i < this.length(); i++) {\n            acumulador = funcion(acumulador, this.lista[i]);\n        }\n        return acumulador;\n    }\n    \n    public reverse(): Lista<T> {\n        const listaReverse: T[] = [];\n        const listaresult =  new Lista(listaReverse);\n        for (let i = this.length() - 1; i >= 0; i--) {\n            listaresult.add(this.lista[i]);\n        }\n        return listaresult;\n    }\n    \n    public forEach(funcion: (elemento: T) => void): void {\n        for (let i = 0; i < this.length(); i++) {\n            funcion(this.lista[i]);\n        }\n    }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5c004a464fc1c5dca0afaab4717e416628501d37"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2pycng18ow=function(){return actualCoverage;};}return actualCoverage;}cov_2pycng18ow();cov_2pycng18ow().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2pycng18ow().s[1]++;exports.Lista=void 0;/*En este ejercicio tendrá que implementar una clase genérica que modele una lista de elementos de cualquier tipo y sus operaciones sin hacer uso de ninguna de las funcionlidades proporcionadas por Array.prototype. Se permite, sin embargo, el uso de []*/ /*
Deberá incluir, al menos, las siguientes operaciones para trabajar con su lista:

Método append, el cual, dadas dos listas, permite añadir al final de la primera los elementos de la segunda.
Método concatenate, que dado un número variable de listas, combina todos sus elementos en una única lista que retorna.
Método filter, que dada una lista y un predicado lógico retorna una lista con todos los elementos de la lista inicial para los cuales el predicado lógico es verdadero.
Método length, que devuelve el número de elementos de la lista.
Método map, que dada una lista y una función, retorna la lista resultante de aplicar a cada elemento de la lista inicial la función.
Método reduce, que dada una lista, una función y un acumulador inicial, reduce cada elemento al acumulador utilizando la función.
Método reverse, el cual dada una lista, retorna una lista con los elementos originales pero en orden inverso.
Método forEach, que dada una lista y una función, permite iterar en los elementos de la lista e invocar la función con cada uno de ellos.
*/class Lista{lista=(cov_2pycng18ow().s[2]++,[]);constructor(lista){cov_2pycng18ow().f[0]++;cov_2pycng18ow().s[3]++;this.lista=lista;}//No usar .push
add(elemento){cov_2pycng18ow().f[1]++;cov_2pycng18ow().s[4]++;this.lista[this.length()]=elemento;}getbyindex(index){cov_2pycng18ow().f[2]++;cov_2pycng18ow().s[5]++;return this.lista[index];}append(lista){cov_2pycng18ow().f[3]++;cov_2pycng18ow().s[6]++;for(let i=(cov_2pycng18ow().s[7]++,0);i<lista.length();i++){cov_2pycng18ow().s[8]++;this.add(lista.lista[i]);}cov_2pycng18ow().s[9]++;return this;}//combina todos sus elementos en una única lista que retorna
concatenate(listas){cov_2pycng18ow().f[4]++;cov_2pycng18ow().s[10]++;for(let i=(cov_2pycng18ow().s[11]++,0);i<listas.length;i++){cov_2pycng18ow().s[12]++;this.append(listas[i]);}cov_2pycng18ow().s[13]++;return this;}filter(predicado){cov_2pycng18ow().f[5]++;const listaFiltrada=(cov_2pycng18ow().s[14]++,[]);const listaresult=(cov_2pycng18ow().s[15]++,new Lista(listaFiltrada));cov_2pycng18ow().s[16]++;for(let i=(cov_2pycng18ow().s[17]++,0);i<this.length();i++){cov_2pycng18ow().s[18]++;if(predicado(this.lista[i])){cov_2pycng18ow().b[0][0]++;cov_2pycng18ow().s[19]++;listaresult.add(this.lista[i]);}else{cov_2pycng18ow().b[0][1]++;}}cov_2pycng18ow().s[20]++;return listaresult;}length(){cov_2pycng18ow().f[6]++;let flag=(cov_2pycng18ow().s[21]++,true);let contador=(cov_2pycng18ow().s[22]++,0);cov_2pycng18ow().s[23]++;while(flag){cov_2pycng18ow().s[24]++;if(this.lista[contador]!=null){cov_2pycng18ow().b[1][0]++;cov_2pycng18ow().s[25]++;contador++;}else{cov_2pycng18ow().b[1][1]++;cov_2pycng18ow().s[26]++;flag=false;}}cov_2pycng18ow().s[27]++;return contador;}map(funcion){cov_2pycng18ow().f[7]++;const listaMap=(cov_2pycng18ow().s[28]++,[]);const listaresult=(cov_2pycng18ow().s[29]++,new Lista(listaMap));cov_2pycng18ow().s[30]++;for(let i=(cov_2pycng18ow().s[31]++,0);i<this.length();i++){cov_2pycng18ow().s[32]++;listaresult.add(funcion(this.lista[i]));}cov_2pycng18ow().s[33]++;return listaresult;}reduce(funcion,acumulador){cov_2pycng18ow().f[8]++;cov_2pycng18ow().s[34]++;for(let i=(cov_2pycng18ow().s[35]++,0);i<this.length();i++){cov_2pycng18ow().s[36]++;acumulador=funcion(acumulador,this.lista[i]);}cov_2pycng18ow().s[37]++;return acumulador;}reverse(){cov_2pycng18ow().f[9]++;const listaReverse=(cov_2pycng18ow().s[38]++,[]);const listaresult=(cov_2pycng18ow().s[39]++,new Lista(listaReverse));cov_2pycng18ow().s[40]++;for(let i=(cov_2pycng18ow().s[41]++,this.length()-1);i>=0;i--){cov_2pycng18ow().s[42]++;listaresult.add(this.lista[i]);}cov_2pycng18ow().s[43]++;return listaresult;}forEach(funcion){cov_2pycng18ow().f[10]++;cov_2pycng18ow().s[44]++;for(let i=(cov_2pycng18ow().s[45]++,0);i<this.length();i++){cov_2pycng18ow().s[46]++;funcion(this.lista[i]);}}}cov_2pycng18ow().s[47]++;exports.Lista=Lista;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby9wNi91bGwtZXNpdC1pbmYtZHNpLTIyLTIzLXByY3QwNi1nZW5lcmljcy1zb2xpZC1hbHUwMTAxMzMwNzc4LmdpdGh1Yi5pby9zcmMvZWplcmNpY2lvXzIudHMiLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vcDYvdWxsLWVzaXQtaW5mLWRzaS0yMi0yMy1wcmN0MDYtZ2VuZXJpY3Mtc29saWQtYWx1MDEwMTMzMDc3OC5naXRodWIuaW8vc3JjL2VqZXJjaWNpb18yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPOzs7QUFFUCw4UEFBOFA7QUFDOVA7Ozs7Ozs7Ozs7O0VBV0U7QUFDRixNQUFhLEtBQUs7SUFDTixLQUFLLEdBQVEsRUFBRSxDQUFDO0lBRXhCLFlBQVksS0FBVTtRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBQ0QsZUFBZTtJQUNSLEdBQUcsQ0FBQyxRQUFXO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQ3pDLENBQUM7SUFFTSxVQUFVLENBQUMsS0FBYTtRQUMzQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFlO1FBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0QsNERBQTREO0lBQ3JELFdBQVcsQ0FBQyxNQUFrQjtRQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFD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IHRlbmRyw6EgcXVlIGltcGxlbWVudGFyIHVuYSBjbGFzZSBnZW7DqXJpY2EgcXVlIG1vZGVsZSB1bmEgbGlzdGEgZGUgZWxlbWVudG9zIGRlIGN1YWxxdWllciB0aXBvIHkgc3VzIG9wZXJhY2lvbmVzIHNpbiBoYWNlciB1c28gZGUgbmluZ3VuYSBkZSBsYXMgZnVuY2lvbmxpZGFkZXMgcHJvcG9yY2lvbmFkYXMgcG9yIEFycmF5LnByb3RvdHlwZS4gU2UgcGVybWl0ZSwgc2luIGVtYmFyZ28sIGVsIHVzbyBkZSBbXSovXG4vKlxuRGViZXLDoSBpbmNsdWlyLCBhbCBtZW5vcywgbGFzIHNpZ3VpZW50ZXMgb3BlcmFjaW9uZXMgcGFyYSB0cmFiYWphciBjb24gc3UgbGlzdGE6XG5cbk3DqXRvZG8gYXBwZW5kLCBlbCBjdWFsLCBkYWRhcyBkb3MgbGlzdGFzLCBwZXJtaXRlIGHDsWFkaXIgYWwgZmluYWwgZGUgbGEgcHJpbWVyYSBsb3MgZWxlbWVudG9zIGRlIGxhIHNlZ3VuZGEuXG5Nw6l0b2RvIGNvbmNhdGVuYXRlLCBxdWUgZGFkbyB1biBuw7ptZXJvIHZhcmlhYmxlIGRlIGxpc3RhcywgY29tYmluYSB0b2RvcyBzdXMgZWxlbWVudG9zIGVuIHVuYSDDum5pY2EgbGlzdGEgcXVlIHJldG9ybmEuXG5Nw6l0b2RvIGZpbHRlciwgcXVlIGRhZGEgdW5hIGxpc3RhIHkgdW4gcHJlZGljYWRvIGzDs2dpY28gcmV0b3JuYSB1bmEgbGlzdGEgY29uIHRvZG9zIGxvcyBlbGVtZW50b3MgZGUgbGEgbGlzdGEgaW5pY2lhbCBwYXJhIGxvcyBjdWFsZXMgZWwgcHJlZGljYWRvIGzDs2dpY28gZXMgdmVyZGFkZXJvLlxuTcOpdG9kbyBsZW5ndGgsIHF1ZSBkZXZ1ZWx2ZSBlbCBuw7ptZXJvIGRlIGVsZW1lbnRvcyBkZSBsYSBsaXN0YS5cbk3DqXRvZG8gbWFwLCBxdWUgZGFkYSB1bmEgbGlzdGEgeSB1bmEgZnVuY2nDs24sIHJldG9ybmEgbGEgbGlzdGEgcmVzdWx0YW50ZSBkZSBhcGxpY2FyIGEgY2FkYSBlbGVtZW50byBkZSBsYSBsaXN0YSBpbmljaWFsIGxhIGZ1bmNpw7NuLlxuTcOpdG9kbyByZWR1Y2UsIHF1ZSBkYWRhIHVuYSBsaXN0YSwgdW5hIGZ1bmNpw7NuIHkgdW4gYWN1bXVsYWRvciBpbmljaWFsLCByZWR1Y2UgY2FkYSBlbGVtZW50byBhbCBhY3VtdWxhZG9yIHV0aWxpemFuZG8gbGEgZnVuY2nDs24uXG5Nw6l0b2RvIHJldmVyc2UsIGVsIGN1YWwgZGFkYSB1bmEgbGlzdGEsIHJldG9ybmEgdW5hIGxpc3RhIGNvbiBsb3MgZWxlbWVudG9zIG9yaWdpbmFsZXMgcGVybyBlbiBvcmRlbiBpbnZlcnNvLlxuTcOpdG9kbyBmb3JFYWNoLCBxdWUgZGFkYSB1bmEgbGlzdGEgeSB1bmEgZnVuY2nDs24sIHBlcm1pdGUgaXRlcmFyIGVuIGxvcyBlbGVtZW50b3MgZGUgbGEgbGlzdGEgZSBpbnZvY2FyIGxhIGZ1bmNpw7NuIGNvbiBjYWRhIHVubyBkZSBlbGxvcy5cbiovXG5leHBvcnQgY2xhc3MgTGlzdGE8VD4ge1xuICAgIHByaXZhdGUgbGlzdGE6IFRbXSA9IFtdO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGxpc3RhOiBUW10pIHtcbiAgICAgICAgdGhpcy5saXN0YSA9IGxpc3RhO1xuICAgIH1cbiAgICAvL05vIHVzYXIgLnB1c2hcbiAgICBwdWJsaWMgYWRkKGVsZW1lbnRvOiBUKTogdm9pZCB7XG4gICAgICAgIHRoaXMubGlzdGFbdGhpcy5sZW5ndGgoKV0gPSBlbGVtZW50bztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0YnlpbmRleChpbmRleDogbnVtYmVyKTogVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RhW2luZGV4XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXBwZW5kKGxpc3RhOiBMaXN0YTxUPik6IExpc3RhPFQ+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0YS5sZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChsaXN0YS5saXN0YVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vY29tYmluYSB0b2RvcyBzdXMgZWxlbWVudG9zIGVuIHVuYSDDum5pY2EgbGlzdGEgcXVlIHJldG9ybmFcbiAgICBwdWJsaWMgY29uY2F0ZW5hdGUobGlzdGFzOiBMaXN0YTxUPltdKTogTGlzdGE8VD4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3Rhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQobGlzdGFzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGZpbHRlcihwcmVkaWNhZG86IChlbGVtZW50bzogVCkgPT4gYm9vbGVhbik6IExpc3RhPFQ+IHtcbiAgICAgICAgY29uc3QgbGlzdGFGaWx0cmFkYTogVFtdID0gW107XG4gICAgICAgY29uc3QgbGlzdGFyZXN1bHQgPSAgbmV3IExpc3RhKGxpc3RhRmlsdHJhZGEpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoKCk7IGkrKykge1xuICAgICAgICAgICAgaWYgKHByZWRpY2Fkbyh0aGlzLmxpc3RhW2ldKSkge1xuICAgICAgICAgICAgICAgIGxpc3RhcmVzdWx0LmFkZCh0aGlzLmxpc3RhW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdGFyZXN1bHQ7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICBsZXQgZmxhZyA9IHRydWU7XG4gICAgICAgbGV0IGNvbnRhZG9yID0gMDtcbiAgICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3RhW2NvbnRhZG9yXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGFkb3IrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250YWRvcjtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIG1hcChmdW5jaW9uOiAoZWxlbWVudG86IFQpID0+IFQpOiBMaXN0YTxUPiB7XG4gICAgICAgIGNvbnN0IGxpc3RhTWFwOiBUW10gPSBbXTtcbiAgICAgICAgY29uc3QgbGlzdGFyZXN1bHQgPSAgbmV3IExpc3RhKGxpc3RhTWFwKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCgpOyBpKyspIHtcbiAgICAgICAgICAgIGxpc3RhcmVzdWx0LmFkZChmdW5jaW9uKHRoaXMubGlzdGFbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdGFyZXN1bHQ7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyByZWR1Y2UoZnVuY2lvbjogKGFjdW11bGFkb3I6IFQsIGVsZW1lbnRvOiBUKSA9PiBULCBhY3VtdWxhZG9yOiBUKTogVCB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgICAgICBhY3VtdWxhZG9yID0gZnVuY2lvbihhY3VtdWxhZG9yLCB0aGlzLmxpc3RhW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN1bXVsYWRvcjtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHJldmVyc2UoKTogTGlzdGE8VD4ge1xuICAgICAgICBjb25zdCBsaXN0YVJldmVyc2U6IFRbXSA9IFtdO1xuICAgICAgICBjb25zdCBsaXN0YXJlc3VsdCA9ICBuZXcgTGlzdGEobGlzdGFSZXZlcnNlKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMubGVuZ3RoKCkgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbGlzdGFyZXN1bHQuYWRkKHRoaXMubGlzdGFbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0YXJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGZvckVhY2goZnVuY2lvbjogKGVsZW1lbnRvOiBUKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgICAgICBmdW5jaW9uKHRoaXMubGlzdGFbaV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,