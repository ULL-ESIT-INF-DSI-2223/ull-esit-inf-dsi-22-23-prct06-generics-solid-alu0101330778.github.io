{"version":3,"file":"/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts","sources":["/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts"],"names":[],"mappings":"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","sourcesContent":["//Lista\n\n/*En este ejercicio tendrá que implementar una clase genérica que modele una lista de elementos de cualquier tipo y sus operaciones sin hacer uso de ninguna de las funcionlidades proporcionadas por Array.prototype. Se permite, sin embargo, el uso de []*/\n/*\nDeberá incluir, al menos, las siguientes operaciones para trabajar con su lista:\n\nMétodo append, el cual, dadas dos listas, permite añadir al final de la primera los elementos de la segunda.\nMétodo concatenate, que dado un número variable de listas, combina todos sus elementos en una única lista que retorna.\nMétodo filter, que dada una lista y un predicado lógico retorna una lista con todos los elementos de la lista inicial para los cuales el predicado lógico es verdadero.\nMétodo length, que devuelve el número de elementos de la lista.\nMétodo map, que dada una lista y una función, retorna la lista resultante de aplicar a cada elemento de la lista inicial la función.\nMétodo reduce, que dada una lista, una función y un acumulador inicial, reduce cada elemento al acumulador utilizando la función.\nMétodo reverse, el cual dada una lista, retorna una lista con los elementos originales pero en orden inverso.\nMétodo forEach, que dada una lista y una función, permite iterar en los elementos de la lista e invocar la función con cada uno de ellos.\n*/\nexport class Lista<T> {\n    private lista: T[] = [];\n    \n    constructor(lista: T[]) {\n        this.lista = lista;\n    }\n    //No usar .push\n    public add(elemento: T): void {\n        this.lista[this.length()] = elemento;\n    }\n\n    public getbyindex(index: number): T {\n        return this.lista[index];\n    }\n\n    public append(lista: Lista<T>): Lista<T> {\n        for (let i = 0; i < lista.length(); i++) {\n            this.add(lista.lista[i]);\n        }\n        return this;\n    }\n    //combina todos sus elementos en una única lista que retorna\n    public concatenate(listas: Lista<T>[]): Lista<T> {\n        for (let i = 0; i < listas.length; i++) {\n            this.append(listas[i]);\n        }\n        return this;\n    }\n    \n    public filter(predicado: (elemento: T) => boolean): Lista<T> {\n        const listaFiltrada: T[] = [];\n       const listaresult =  new Lista(listaFiltrada);\n        for (let i = 0; i < this.length(); i++) {\n            if (predicado(this.lista[i])) {\n                listaresult.add(this.lista[i]);\n            }\n        }\n        return listaresult;\n    }\n    \n    public length(): number {\n       let flag = true;\n       let contador = 0;\n        while (flag) {\n            if (this.lista[contador] != null) {\n                contador++;\n            } else {\n                flag = false;\n            }\n        }\n        return contador;\n    }\n    \n    public map(funcion: (elemento: T) => T): Lista<T> {\n        const listaMap: T[] = [];\n        const listaresult =  new Lista(listaMap);\n        for (let i = 0; i < this.length(); i++) {\n            listaresult.add(funcion(this.lista[i]));\n        }\n        return listaresult;\n    }\n    \n    public reduce(funcion: (acumulador: T, elemento: T) => T, acumulador: T): T {\n        for (let i = 0; i < this.length(); i++) {\n            acumulador = funcion(acumulador, this.lista[i]);\n        }\n        return acumulador;\n    }\n    \n    public reverse(): Lista<T> {\n        const listaReverse: T[] = [];\n        const listaresult =  new Lista(listaReverse);\n        for (let i = this.length() - 1; i >= 0; i--) {\n            listaresult.add(this.lista[i]);\n        }\n        return listaresult;\n    }\n    \n    public forEach(funcion: (elemento: T) => void): void {\n        for (let i = 0; i < this.length(); i++) {\n            funcion(this.lista[i]);\n        }\n    }\n}\n"]}