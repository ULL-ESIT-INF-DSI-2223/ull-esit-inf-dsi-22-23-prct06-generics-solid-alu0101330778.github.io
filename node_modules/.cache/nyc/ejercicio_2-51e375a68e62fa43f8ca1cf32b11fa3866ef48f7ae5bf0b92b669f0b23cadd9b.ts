"use strict";//Lista
function cov_2pycng18ow(){var path="/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts";var hash="f2ffa355d38c0c391340adde01a91f01b97e155e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:62}},"1":{start:{line:4,column:0},end:{line:4,column:23}},"2":{start:{line:9,column:12},end:{line:9,column:14}},"3":{start:{line:11,column:8},end:{line:11,column:27}},"4":{start:{line:18,column:8},end:{line:18,column:45}},"5":{start:{line:26,column:8},end:{line:26,column:33}},"6":{start:{line:34,column:8},end:{line:36,column:9}},"7":{start:{line:34,column:21},end:{line:34,column:22}},"8":{start:{line:35,column:12},end:{line:35,column:37}},"9":{start:{line:37,column:8},end:{line:37,column:20}},"10":{start:{line:45,column:8},end:{line:47,column:9}},"11":{start:{line:45,column:21},end:{line:45,column:22}},"12":{start:{line:46,column:12},end:{line:46,column:35}},"13":{start:{line:48,column:8},end:{line:48,column:20}},"14":{start:{line:56,column:30},end:{line:56,column:32}},"15":{start:{line:57,column:28},end:{line:57,column:52}},"16":{start:{line:58,column:8},end:{line:62,column:9}},"17":{start:{line:58,column:21},end:{line:58,column:22}},"18":{start:{line:59,column:12},end:{line:61,column:13}},"19":{start:{line:60,column:16},end:{line:60,column:47}},"20":{start:{line:63,column:8},end:{line:63,column:27}},"21":{start:{line:70,column:19},end:{line:70,column:23}},"22":{start:{line:71,column:23},end:{line:71,column:24}},"23":{start:{line:72,column:8},end:{line:79,column:9}},"24":{start:{line:73,column:12},end:{line:78,column:13}},"25":{start:{line:74,column:16},end:{line:74,column:27}},"26":{start:{line:77,column:16},end:{line:77,column:29}},"27":{start:{line:80,column:8},end:{line:80,column:24}},"28":{start:{line:88,column:25},end:{line:88,column:27}},"29":{start:{line:89,column:28},end:{line:89,column:47}},"30":{start:{line:90,column:8},end:{line:92,column:9}},"31":{start:{line:90,column:21},end:{line:90,column:22}},"32":{start:{line:91,column:12},end:{line:91,column:52}},"33":{start:{line:93,column:8},end:{line:93,column:27}},"34":{start:{line:101,column:8},end:{line:103,column:9}},"35":{start:{line:101,column:21},end:{line:101,column:22}},"36":{start:{line:102,column:12},end:{line:102,column:60}},"37":{start:{line:104,column:8},end:{line:104,column:26}},"38":{start:{line:111,column:29},end:{line:111,column:31}},"39":{start:{line:112,column:28},end:{line:112,column:51}},"40":{start:{line:113,column:8},end:{line:115,column:9}},"41":{start:{line:113,column:21},end:{line:113,column:38}},"42":{start:{line:114,column:12},end:{line:114,column:43}},"43":{start:{line:116,column:8},end:{line:116,column:27}},"44":{start:{line:123,column:8},end:{line:125,column:9}},"45":{start:{line:123,column:21},end:{line:123,column:22}},"46":{start:{line:124,column:12},end:{line:124,column:35}},"47":{start:{line:128,column:0},end:{line:128,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:23},end:{line:12,column:5}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:18},end:{line:19,column:5}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:22},end:{line:27,column:5}},line:25},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:18},end:{line:38,column:5}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:24},end:{line:49,column:5}},line:44},"5":{name:"(anonymous_5)",decl:{start:{line:55,column:4},end:{line:55,column:5}},loc:{start:{line:55,column:22},end:{line:64,column:5}},line:55},"6":{name:"(anonymous_6)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:13},end:{line:81,column:5}},line:69},"7":{name:"(anonymous_7)",decl:{start:{line:87,column:4},end:{line:87,column:5}},loc:{start:{line:87,column:17},end:{line:94,column:5}},line:87},"8":{name:"(anonymous_8)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:32},end:{line:105,column:5}},line:100},"9":{name:"(anonymous_9)",decl:{start:{line:110,column:4},end:{line:110,column:5}},loc:{start:{line:110,column:14},end:{line:117,column:5}},line:110},"10":{name:"(anonymous_10)",decl:{start:{line:122,column:4},end:{line:122,column:5}},loc:{start:{line:122,column:21},end:{line:126,column:5}},line:122}},branchMap:{"0":{loc:{start:{line:59,column:12},end:{line:61,column:13}},type:"if",locations:[{start:{line:59,column:12},end:{line:61,column:13}},{start:{line:59,column:12},end:{line:61,column:13}}],line:59},"1":{loc:{start:{line:73,column:12},end:{line:78,column:13}},type:"if",locations:[{start:{line:73,column:12},end:{line:78,column:13}},{start:{line:73,column:12},end:{line:78,column:13}}],line:73}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts",sources:["/home/usuario/p6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101330778.github.io/src/ejercicio_2.ts"],names:[],mappings:"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",sourcesContent:["//Lista\n\n/**\n * Clase generica de datos que define una lista\n */\nexport class Lista<T> {\n  private lista: T[] = [];\n\n  constructor(lista: T[]) {\n    this.lista = lista;\n  }\n  /**\n   * A\xF1ade un elemento al final de la lista\n   * @param elemento Elemento a a\xF1adir\n   */\n  public add(elemento: T): void {\n    this.lista[this.length()] = elemento;\n  }\n\n  /**\n   * Devuelve el elemento de la lista en la posici\xF3n index\n   * @param index Posici\xF3n del elemento\n   * @returns Elemento de la lista\n   */\n  public getbyindex(index: number): T {\n    return this.lista[index];\n  }\n\n  /**\n   * Une dos listas\n   * @param lista Lista a unir\n   * @returns Lista unida\n   */\n  public append(lista: Lista<T>): Lista<T> {\n    for (let i = 0; i < lista.length(); i++) {\n      this.add(lista.lista[i]);\n    }\n    return this;\n  }\n  /**\n   * Une varias listas\n   * @param listas Listas a unir\n   * @returns Lista unida\n   */\n  public concatenate(listas: Lista<T>[]): Lista<T> {\n    for (let i = 0; i < listas.length; i++) {\n      this.append(listas[i]);\n    }\n    return this;\n  }\n  /**\n   * Filtra la lista en base a una funcion predicado\n   * @param predicado Funcion predicado\n   * @returns Lista filtrada\n   */\n  public filter(predicado: (elemento: T) => boolean): Lista<T> {\n    const listaFiltrada: T[] = [];\n    const listaresult = new Lista(listaFiltrada);\n    for (let i = 0; i < this.length(); i++) {\n      if (predicado(this.lista[i])) {\n        listaresult.add(this.lista[i]);\n      }\n    }\n    return listaresult;\n  }\n  /**\n   * Calcula el tama\xF1o de la lista\n   * @returns El tama\xF1o de la lista\n   */\n  public length(): number {\n    let flag = true;\n    let contador = 0;\n    while (flag) {\n      if (this.lista[contador] != null) {\n        contador++;\n      } else {\n        flag = false;\n      }\n    }\n    return contador;\n  }\n  /**\n   * Actua con una funcion sobre todos los par\xE1metros de la lista y devuelve una lista con los resultados\n   * @param funcion Funcion a aplicar\n   * @returns Lista con los resultados\n   */\n  public map(funcion: (elemento: T) => T): Lista<T> {\n    const listaMap: T[] = [];\n    const listaresult = new Lista(listaMap);\n    for (let i = 0; i < this.length(); i++) {\n      listaresult.add(funcion(this.lista[i]));\n    }\n    return listaresult;\n  }\n  /**\n   * Reduce la lista a un valor\n   * @param funcion Funcion a aplicar\n   * @returns Valor resultante\n   */\n  public reduce(funcion: (acumulador: T, elemento: T) => T, acumulador: T): T {\n    for (let i = 0; i < this.length(); i++) {\n      acumulador = funcion(acumulador, this.lista[i]);\n    }\n    return acumulador;\n  }\n\n  /**\n   * Devuelve la lista invertida\n   * @returns Lista invertida\n   */\n  public reverse(): Lista<T> {\n    const listaReverse: T[] = [];\n    const listaresult = new Lista(listaReverse);\n    for (let i = this.length() - 1; i >= 0; i--) {\n      listaresult.add(this.lista[i]);\n    }\n    return listaresult;\n  }\n  /**\n   * Actua con una funcion sobre todos los par\xE1metros de la lista\n   * @param funcion Funcion a aplicar\n   */\n  public forEach(funcion: (elemento: T) => void): void {\n    for (let i = 0; i < this.length(); i++) {\n      funcion(this.lista[i]);\n    }\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f2ffa355d38c0c391340adde01a91f01b97e155e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2pycng18ow=function(){return actualCoverage;};}return actualCoverage;}cov_2pycng18ow();cov_2pycng18ow().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2pycng18ow().s[1]++;exports.Lista=void 0;/**
 * Clase generica de datos que define una lista
 */class Lista{lista=(cov_2pycng18ow().s[2]++,[]);constructor(lista){cov_2pycng18ow().f[0]++;cov_2pycng18ow().s[3]++;this.lista=lista;}/**
     * Añade un elemento al final de la lista
     * @param elemento Elemento a añadir
     */add(elemento){cov_2pycng18ow().f[1]++;cov_2pycng18ow().s[4]++;this.lista[this.length()]=elemento;}/**
     * Devuelve el elemento de la lista en la posición index
     * @param index Posición del elemento
     * @returns Elemento de la lista
     */getbyindex(index){cov_2pycng18ow().f[2]++;cov_2pycng18ow().s[5]++;return this.lista[index];}/**
     * Une dos listas
     * @param lista Lista a unir
     * @returns Lista unida
     */append(lista){cov_2pycng18ow().f[3]++;cov_2pycng18ow().s[6]++;for(let i=(cov_2pycng18ow().s[7]++,0);i<lista.length();i++){cov_2pycng18ow().s[8]++;this.add(lista.lista[i]);}cov_2pycng18ow().s[9]++;return this;}/**
     * Une varias listas
     * @param listas Listas a unir
     * @returns Lista unida
     */concatenate(listas){cov_2pycng18ow().f[4]++;cov_2pycng18ow().s[10]++;for(let i=(cov_2pycng18ow().s[11]++,0);i<listas.length;i++){cov_2pycng18ow().s[12]++;this.append(listas[i]);}cov_2pycng18ow().s[13]++;return this;}/**
     * Filtra la lista en base a una funcion predicado
     * @param predicado Funcion predicado
     * @returns Lista filtrada
     */filter(predicado){cov_2pycng18ow().f[5]++;const listaFiltrada=(cov_2pycng18ow().s[14]++,[]);const listaresult=(cov_2pycng18ow().s[15]++,new Lista(listaFiltrada));cov_2pycng18ow().s[16]++;for(let i=(cov_2pycng18ow().s[17]++,0);i<this.length();i++){cov_2pycng18ow().s[18]++;if(predicado(this.lista[i])){cov_2pycng18ow().b[0][0]++;cov_2pycng18ow().s[19]++;listaresult.add(this.lista[i]);}else{cov_2pycng18ow().b[0][1]++;}}cov_2pycng18ow().s[20]++;return listaresult;}/**
     * Calcula el tamaño de la lista
     * @returns El tamaño de la lista
     */length(){cov_2pycng18ow().f[6]++;let flag=(cov_2pycng18ow().s[21]++,true);let contador=(cov_2pycng18ow().s[22]++,0);cov_2pycng18ow().s[23]++;while(flag){cov_2pycng18ow().s[24]++;if(this.lista[contador]!=null){cov_2pycng18ow().b[1][0]++;cov_2pycng18ow().s[25]++;contador++;}else{cov_2pycng18ow().b[1][1]++;cov_2pycng18ow().s[26]++;flag=false;}}cov_2pycng18ow().s[27]++;return contador;}/**
     * Actua con una funcion sobre todos los parámetros de la lista y devuelve una lista con los resultados
     * @param funcion Funcion a aplicar
     * @returns Lista con los resultados
     */map(funcion){cov_2pycng18ow().f[7]++;const listaMap=(cov_2pycng18ow().s[28]++,[]);const listaresult=(cov_2pycng18ow().s[29]++,new Lista(listaMap));cov_2pycng18ow().s[30]++;for(let i=(cov_2pycng18ow().s[31]++,0);i<this.length();i++){cov_2pycng18ow().s[32]++;listaresult.add(funcion(this.lista[i]));}cov_2pycng18ow().s[33]++;return listaresult;}/**
     * Reduce la lista a un valor
     * @param funcion Funcion a aplicar
     * @returns Valor resultante
     */reduce(funcion,acumulador){cov_2pycng18ow().f[8]++;cov_2pycng18ow().s[34]++;for(let i=(cov_2pycng18ow().s[35]++,0);i<this.length();i++){cov_2pycng18ow().s[36]++;acumulador=funcion(acumulador,this.lista[i]);}cov_2pycng18ow().s[37]++;return acumulador;}/**
     * Devuelve la lista invertida
     * @returns Lista invertida
     */reverse(){cov_2pycng18ow().f[9]++;const listaReverse=(cov_2pycng18ow().s[38]++,[]);const listaresult=(cov_2pycng18ow().s[39]++,new Lista(listaReverse));cov_2pycng18ow().s[40]++;for(let i=(cov_2pycng18ow().s[41]++,this.length()-1);i>=0;i--){cov_2pycng18ow().s[42]++;listaresult.add(this.lista[i]);}cov_2pycng18ow().s[43]++;return listaresult;}/**
     * Actua con una funcion sobre todos los parámetros de la lista
     * @param funcion Funcion a aplicar
     */forEach(funcion){cov_2pycng18ow().f[10]++;cov_2pycng18ow().s[44]++;for(let i=(cov_2pycng18ow().s[45]++,0);i<this.length();i++){cov_2pycng18ow().s[46]++;funcion(this.lista[i]);}}}cov_2pycng18ow().s[47]++;exports.Lista=Lista;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,